{"version":3,"sources":["components/Navbar/index.js","components/Employees/EmployeeItem.js","components/Employees/Employees.js","components/Search/Search.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","Header","as","icon","textAlign","Icon","name","circular","Content","className","EmployeeItem","props","employee","email","picture","phone","dob","Table","Row","Cell","Image","src","thumbnail","alt","first","last","date","split","Employees","celled","HeaderCell","link","Body","this","employees","map","key","Component","Search","Form","Input","placeholder","width","axios","get","App","state","filteredEmployees","API","then","results","setState","data","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2VAqBeA,MAhBf,WACI,OACI,6BACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,KAAKC,MAAI,EAACC,UAAU,UAC3B,kBAACC,EAAA,EAAD,CAAMC,KAAK,QAAQC,UAAQ,IAC3B,kBAACN,EAAA,EAAOO,QAAR,2BAGA,0BAAMC,UAAU,aAAaL,UAAU,UAAvC,uF,kBC+BDM,EAxCM,SAACC,GAAU,MASiBA,EAAMC,SAA3CN,EAToB,EASpBA,KAAMO,EATc,EASdA,MAAOC,EATO,EASPA,QAASC,EATF,EASEA,MAAOC,EATT,EASSA,IACrC,OACI,kBAACC,EAAA,EAAMC,IAAP,KAEI,kBAACD,EAAA,EAAME,KAAP,KACI,kBAACC,EAAA,EAAD,CAAOC,IAAKP,EAAQQ,UAAWC,IAAI,2BAGvC,kBAACN,EAAA,EAAME,KAAP,KACI,2BAAIb,EAAKkB,MAAT,IAAiBlB,EAAKmB,OAG1B,kBAACR,EAAA,EAAME,KAAP,KACI,2BAAIJ,IAGR,kBAACE,EAAA,EAAME,KAAP,KACI,2BAAIN,IAGR,kBAACI,EAAA,EAAME,KAAP,KACI,2BAAeH,EAAIU,KA1BTC,MAAM,KACZ,OCyBLC,E,uKA3BP,OACI,6BACI,kBAACX,EAAA,EAAD,CAAOY,QAAM,GACT,kBAACZ,EAAA,EAAMhB,OAAP,KACI,kBAACgB,EAAA,EAAMC,IAAP,KACI,kBAACD,EAAA,EAAMa,WAAP,cACA,kBAACb,EAAA,EAAMa,WAAP,YAEI,kBAACzB,EAAA,EAAD,CAAM0B,MAAI,EAACzB,KAAK,gBAEpB,kBAACW,EAAA,EAAMa,WAAP,cACA,kBAACb,EAAA,EAAMa,WAAP,cACA,kBAACb,EAAA,EAAMa,WAAP,cAIR,kBAACb,EAAA,EAAMe,KAAP,KACKC,KAAKtB,MAAMuB,UAAUC,KAAI,SAAAvB,GAAQ,OAC9B,kBAAC,EAAD,CAAcwB,IAAKxB,EAASC,MAAOD,SAAUA,c,GArBjDyB,a,SCOTC,MARf,WACI,OACI,kBAACC,EAAA,EAAD,CAAM9B,UAAU,qBACZ,kBAAC8B,EAAA,EAAKC,MAAN,CAAYC,YAAY,SAASC,MAAM,Q,2BCJrC,EACF,WAEA,OAAOC,IAAMC,IAAI,iDC2BdC,E,4MAvBbC,MAAQ,CACNZ,UAAW,GACXa,kBAAmB,I,uLAInBC,IAAaC,MAAK,SAAAC,GAChB,EAAKC,SAAS,CAAEjB,UAAWgB,EAAQE,KAAKF,UACxCG,QAAQC,IAAI,EAAKR,MAAMZ,c,gIAKzB,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWA,UAAWD,KAAKa,MAAMZ,iB,GAnBvBG,aCKEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlB,QAAQkB,MAAMA,EAAMC,c","file":"static/js/main.da65dc68.chunk.js","sourcesContent":["import React from 'react';\nimport \"./style.css\";\n\nimport { Header, Icon } from 'semantic-ui-react'\n\nfunction Navbar() {\n    return (\n        <div>\n            <Header as='h2' icon textAlign='center'>\n                <Icon name='users' circular />\n                <Header.Content>\n                    Employee Directory\n                </Header.Content>\n                <span className=\"sub header\" textAlign=\"center\">\n                    Click on carrots to filter by name or use the search box to narrow your results.\n                </span>   \n            </Header>\n        </div>\n    )\n}\n\nexport default Navbar;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table, Image } from 'semantic-ui-react';\n\nconst EmployeeItem = (props) => {\n    \n    //Split dob.date string at the \"T\" to format DOB\n    function dateFormat(date){\n        const temp = date.split(\"T\");\n        return temp[0];\n    }\n\n    //Destructuring this.state for access to props\n    const { name, email, picture, phone, dob } = props.employee;\n    return (\n        <Table.Row>\n            {/* Image */}\n            <Table.Cell>\n                <Image src={picture.thumbnail} alt=\"Thumbnail portrait of\"/>\n            </Table.Cell>\n            {/* First and Last Name */}\n            <Table.Cell>\n                <p>{name.first} {name.last}</p>\n            </Table.Cell>\n            {/* Phone Number */}\n            <Table.Cell>\n                <p>{phone}</p>\n            </Table.Cell>\n            {/* Email */}\n            <Table.Cell>\n                <p>{email}</p>\n            </Table.Cell>\n            {/* Formatted DOB */}\n            <Table.Cell>\n                <p>{dateFormat(dob.date)}</p>\n            </Table.Cell>\n        </Table.Row>\n    )\n}\n\nEmployeeItem.propTypes = {\n    employee: PropTypes.object.isRequired\n}\n\nexport default EmployeeItem","import React, { Component } from 'react'\nimport EmployeeItem from './EmployeeItem';\nimport { Icon, Table } from 'semantic-ui-react';\n\nclass Employees extends Component {\n\n    render() {\n        return (\n            <div>\n                <Table celled>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>Image</Table.HeaderCell>\n                            <Table.HeaderCell>\n                                Name\n                                <Icon link name=\"caret down\" />\n                            </Table.HeaderCell>\n                            <Table.HeaderCell>Phone</Table.HeaderCell>\n                            <Table.HeaderCell>Email</Table.HeaderCell>\n                            <Table.HeaderCell>DOB</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n\n                    <Table.Body>\n                        {this.props.employees.map(employee => (\n                            <EmployeeItem key={employee.email} employee={employee} />\n                        ))}\n                    </Table.Body>\n                </Table>  \n            </div>\n        )\n    }\n}\n\nexport default Employees;\n","import React from 'react'\nimport { Form } from 'semantic-ui-react'\n\nfunction Search() {\n    return (\n        <Form className=\"ui center aligned\">\n            <Form.Input placeholder=\"Search\" width=\"6\" />\n        </Form>\n    )\n}\n\nexport default Search;","import axios from 'axios';\n\nexport default{\n    getEmp: function(){\n            // 50 Dummy Employees from Random User Generator API\n            return axios.get(\"https://randomuser.me/api/?results=50&nat=us\");\n    }\n}","import React, { Component } from 'react';\nimport Navbar from './components/Navbar';\nimport Employees from './components/Employees/Employees';\nimport Search from './components/Search/Search'\nimport 'semantic-ui-css/semantic.min.css';\nimport API from \"./utils/API\";\n\nclass App extends Component {\n\n  state = {\n    employees: [],\n    filteredEmployees: []\n  }\n\n  async componentDidMount(){\n    API.getEmp().then(results => {\n      this.setState({ employees: results.data.results });\n      console.log(this.state.employees)\n    })\n  }\n\n  render(){\n    return (\n      <div>\n        <Navbar />\n        <Search />\n        <Employees employees={this.state.employees} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}